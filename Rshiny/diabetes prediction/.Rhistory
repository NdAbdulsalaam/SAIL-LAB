data("mtcars")
my_data <- mt_cars
head(mtcars)
library('tidyverse')
# We can visualize the uncertainty of data by predicted residual errors
# Step 1 : Residual Error
my_data <- mtcars
my_model <- lm(qsec ~ mpg, data = my_data)
# Make Predictions
predictions <- predict(my_model, newdata = my_data)
my_data$err <- (predictions - my_data$qsec)
# Step 2 : Plot Prediction with residuals
ggplot(data = my_data) +
geom_point(aes(x=mpg, y = qsec)) +
geom_line(aes(x = mpg, y = predictions)) +
geom_line(aes(x=mpg, y=err), colour = "red")+
geom_hline(yintercept = 0)
# To understand the uncertainty, we look at the range of residual errors
min(my_data$err); max(my_data$err)
# The residual errors show that the mpg is correlated with qsec.
# The uncertainty range is between -3.64 and 2.64
# This means that as mpg changes, we can predict the qsec range with some uncertainty.
### Generate two normal distributions
x1 = rnorm(n = 10, mean = 0, sd = 1)
x2 = rnorm(n = 10, mean = 0.5, sd = 1)
### Perform t-test
t.test(x1, x2)
Welch Two Sample t-test
### Generate two normal distributions
x1 = rnorm(n = 10, mean = 0, sd = 1)
x2 = rnorm(n = 10, mean = 0.5, sd = 1)
### Perform t-test
t.test(x1, x2)
?dbinom()
dbinom(x=0:8, size=8, prob=1/6)
X.prob <- dbinom(x=0:8,size=8,prob=1/6)
barplot(X.prob,names.arg=0:8,space=0,xlab="x",ylab="Pr(X = x)")
X.prob <- dbinom(x=0:13,size=13,prob=3/4)
barplot(X.prob,names.arg=0:13,space=0,xlab="x",ylab="Pr(X = x)")
X.prob
X <- dbinom(x=0:13,size=13,prob=3/4)
X
barplot(X,names.arg=0:13,space=0,xlab="x",ylab="Pr(X = x)")
X <- dbinom(x=10:13,size=13,prob=3/4)
X
barplot(X,names.arg=0:13,space=0,xlab="x",ylab="Pr(X = x)")
X <- dbinom(x=10:13,size=13,prob=3/4)
X
barplot(X,names.arg=0:13,space=0,xlab="x",ylab="Pr(X = x)")
barplot(X,names.arg=10:13,space=0,xlab="x",ylab="Pr(X = x)")
sum(X)
X <- dbinom(x=0:9,size=13,prob=3/4)
1 - sum(X)
sum(X)
X <- dbinom(x=8:11,size=13,prob=3/4)
sum(X)
for(i in c){
if(i %in% c(5,7,9)) {
next
}
print(i)
}
for(i in num){
if(i %in% c(5,7,9)) {
next
}
print(i)
}
num <- c(1:10)
for(i in num){
if(i %in% c(5,7,9)) {
next
}
print(i)
}
for(i in num){
if(i %in% c(5,7,9)) {
paste(i, "is our student")
next
}
paste(i, 'is not our student')
}
print(paste(i, 'is not our student'))
for(i in num){
if(i %in% c(5,7,9)) {
print(paste(i, "is our student"))
next
}
print(paste(i, 'is not our student'))
}
num <- sample(1:100, 100, replace = TRUE)  # Sample data
num
num <- sample(1:100, replace = TRUE)  # Sample data
num
num <- sample(1:100, 100,replace = TRUE)  # Sample data
num
library(microbenchmark)
?sample
num <- sample(1:100, 10,replace = TRUE)  # Sample data
num
# Using %in%
code_in <- function() {
for(i in num) {
if(i %in% c(5, 7, 9)) {
print(paste(i, "is our student"))
next
}
print(paste(i, 'is not our student'))
}
}
# Using ||
code_or <- function() {
for(i in num) {
if(i == 5 || i == 7 || i == 9) {
print(paste(i, "is our student"))
next
}
print(paste(i, 'is not our student'))
}
}
# Benchmarking
microbenchmark(code_in(), code_or(), times = 100)
for (i in 1:10) {
print(i)
}
sum_even = function(num) {
for(i in num){
my_sum <- []
sum_even = function(num) {
for(i in num){
my_sum <- c()
if(num%%2==0){
append(my_sum, new_num)
}
}
print(sum(my_sum))
}
sum_even(20)
sum_even = function(num) {
for(i in num){
my_sum <- c()
if(num%%2==0){
append(my_sum,num)
}
}
print(sum(my_sum))
}
sum_even = function(num) {
for(i in num){
my_sum <- c()
if(num%%2==0){
append(my_sum,num)
}
}
print(sum(my_sum))
}
n
sum_even(20)
sum_even = function(num) {
for(i in num){
my_sum <- c()
if(num%%2==0){
append(my_sum,num)
}
}
print(sum(my_sum))
}
sum_even(20)
sum_even = function(num) {
for(i in num){
my_sum <- c()
if(num%%2==0){
my_sum <- append(my_sum,num)
}
}
print(sum(my_sum))
}
sum_even(20)
my_sum <- append(my_sum,num)
sum_even = function(num) {
my_sum <- c()
for(i in num){
if(num%%2==0){
my_sum <- append(my_sum,num)
}
}
print(sum(my_sum))
}
sum_even(20)
sum_even = function(num) {
my_sum <- c()
for(i in num){
if(num%%2==0){
my_sum <- append(my_sum,num)
print(my_sum)
}
}
print(sum(my_sum))
}
sum_even(20)
sum_even(1:20)
sum_even = function(num) {
my_sum <- c()
for(i in num){
if(num%%2==0){
my_sum <- append(my_sum,num)
}
}
print(sum(my_sum))
}
sum_even(1:20)
sum_even = function(num) {
my_sum <- c()
for(i in num){
if(num%%2==0){
my_sum <- append(my_sum,num)
}
}
print(sum(my_sum))
}
sum_even(c(1:20))
print(c(1:20))
my_num <- c(1:20)
sum_even(my_num)
sum_even = function(num) {
my_sum <- c()
for(i in num){
if(i%%2==0){
my_sum <- append(my_sum,num)
}
}
print(sum(my_sum))
}
my_num <- c(1:20)
sum_even(my_num)
my_num
sum_even = function(num) {
my_sum <- c()
for(i in num){
if(i%%2==0){
my_sum <- append(my_sum,num)
print(my_sum)
}
}
print(sum(my_sum))
}
my_num <- c(1:5)
my_num
sum_even(my_num)
my_sum <- append(my_sum,i)
sum_even = function(num) {
my_sum <- c()
for(i in num){
if(i%%2==0){
my_sum <- append(my_sum,i)
print(my_sum)
}
}
print(sum(my_sum))
}
my_num <- c(1:5)
my_num
sum_even(my_num)
my_num <-
sum_even(c(1:5))
sum_even = function(num) {
my_sum <- c()
for(i in num){
if(i%%2==0){
my_sum <- append(my_sum,i)
}
}
print(sum(my_sum))
}
my_num <-
sum_even(c(1:5))
my_recur <- function(num) {
if(num == 0 || num == 1) {
return(1)
} else {
return(num * my_recur(num - 1))
}
}
my_recur(5)
my_recur <- function(num) {
if(num == 0) {
return(1)
} else {
return(num * my_recur(num - 1))
}
}
my_recur(5)
my_recur2 <- function(num) {
if(num == 0 || num ==1) {
return(1)
} else {
return(num * my_recur2(num - 1))
}
}
my_recur(20)
my_recur2(10)
my_recur2(20)
my_recur(10)
my_recur2(10)
sum_even2 = function(num) {
sum <- c()
for(i in num){
if(i%%2==0){
sum <- sum + i
}
}
return sum
sum_even2 = function(num) {
sum <- c()
for(i in num){
if(i%%2==0){
sum <- sum + i
}
}
return(sum)
}
sum_even(c(1:5))
sum_even(c(1:5))
sum_even2(c(1:5))
sum_even2 = function(num) {
sum <- 0
for(i in num){
if(i%%2==0){
sum <- sum + i
}
}
return(sum)
}
sum_even(c(1:5))
sum_even2(c(1:5))
my_recur <- function(num) {
if(num == 0) {
return(1)
} else {
return(num * my_recur(num - 1))
}
}
my_recur(10)
my_recur(5)
my_recur <- function(num) {
while(num > 1) {
return(num * my_recur(num - 1))
}
}
my_recur(5)
my_recur <- function(num) {
while(num > 1) {
return(num * my_recur(num - 1))
}else {
my_sum = function(num) {
my_even <- 0
my_odd <- 0
for(i in num){
if(i%%2==0){
my_even <- sum + i
}
if(i%%2==0){
my_odd <- sum + i
}
}
paste("Sum of even numbers", my_even)
paste("Sum of odd numbers", my_odd)
}
my_sum(c(1:5))
my_sum = function(num) {
my_even <- 0
my_odd <- 0
for(i in num){
if(i%%2==0){
my_even <- my_even + i
}
if(i%%2==0){
my_odd <- my_odd + i
}
}
paste("Sum of even numbers", my_even)
paste("Sum of odd numbers", my_odd)
}
my_sum(c(1:5))
my_sum(c(1:5))
my_sum = function(num) {
my_even <- 0
my_odd <- 0
for(i in num){
if(i%%2==0){
my_even <- my_even + i
}
if(i%%2==0){
my_odd <- my_odd + i
}
}
print( paste("Sum of even numbers", my_even))
print(paste("Sum of odd numbers", my_odd))
}
my_sum(c(1:5))
my_sum(c(1:15))
my_sum = function(num) {
my_even <- 0
my_odd <- 0
for(i in num){
if(i%%2==0){
my_even <- my_even + i
} else {
my_odd <- my_odd + i
}
}
print( paste("Sum of even numbers", my_even))
print(paste("Sum of odd numbers", my_odd))
}
my_sum(c(1:15))
library(usingR)
data(father.son)
data("father.son")
data(father.son)
pacman::p_load(
usingR,
broom,
BSDA,
manipulate,
ggfortiffy
)
data(father.son)
data(diamond)
library(UsingR)
data(diamond)
pacman::p_load(
usingR,
broom,
BSDA,
manipulate,
ggfortiffy
)
library(UsingR)
data(diamond)
install.packages("UsingR")
library(UsingR)
data(diamond)
head(diamond)
data(father.son)
pacman::p_load(
usingR,
broom,
BSDA,
manipulate,
ggfortiffy
)
?glm
install.packages(shinny)
install.packages('shinny')
install.packages('Rtools')
install.packages('shinny')
install.packages('Rtools')
runApp("C:/Users/Open User/Desktop/Nurudeen-DS/Rshiny")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Illustrating markup"),
sidebarPanel(
h1('Sidebar panel'),
h1('H1 text'),
h2('H2 Text'),
h3('H3 Text'),
h4('H4 Text')
),
mainPanel(
h3('Main Panel text'),
code('some code'),
p('some ordinary text')
)
))
shinyServer(
function(input, output) {
}
)
setwd('"C:\Users\Open User\Desktop\Nurudeen-DS\Rshiny"')
setwd("C:\Users\Open User\Desktop\Nurudeen-DS\Rshiny")
setwd("C:/Users\Open User\Desktop\Nurudeen-DS\Rshiny")
setwd("C:/Users/Open User/Desktop/Nurudeen-DS/Rshiny")
runApp()
runApp()
library(shiny)
shinyUI(
pageWithSidebar(
# Application title
headerPanel("Diabetes prediction"),
sidebarPanel(
numericInput('glucose', 'Glucose mg/dl', 90, min = 50, max = 200, step = 5),
submitButton('Submit')
),
mainPanel(
h3('Results of prediction'),
h4('You entered'),
verbatimTextOutput("inputValue"),
h4('Which resulted in a prediction of '),
verbatimTextOutput("prediction")
)
)
)
setwd("C:/Users/Open User/Desktop/Nurudeen-DS/Rshiny/app2")
library(shiny)
diabetesRisk <- function(glucose) glucose / 200
shinyServer(
function(input, output) {
output$inputValue <- renderPrint({input$glucose})
output$prediction <- renderPrint({diabetesRisk(input$glucose)})
}
)
runApp()
