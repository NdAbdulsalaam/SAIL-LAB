yeme <- mode(c(1, 2, 3, 3, 4, 4, 4,7))
yeme
yeme <- (c(1, 2, 3, 3, 4, 4, 4,7))
value_counts <- tale(data)
yeme <- (c(1, 2, 3, 3, 4, 4, 4,7))
value_counts <- table(data)
yeme <- (c(1, 2, 3, 3, 4, 4, 4,7))
value_counts <- table(data)
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
value_counts <- table(data)
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
value_counts <- table(data)
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
value_counts <- table(data)
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
value_counts <- table(yeme)
max_count <- max(value_counts)
modes <- as.numeric(names(value_counts[value_counts == max_count]))
print(mode)
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
value_counts <- table(yeme)
max_count <- max(value_counts)
modes <- as.numeric(names(value_counts[value_counts == max_count]))
print(modes)
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
value_counts <- table(yeme)
# max_count <- max(value_counts)
# modes <- as.numeric(names(value_counts[value_counts == max_count]))
# print(modes)
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
value_counts <- table(yeme)
# max_count <- max(value_counts)
# modes <- as.numeric(names(value_counts[value_counts == max_count]))
# print(modes)
value_counts
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
value_counts <- table(yeme)
max_count <- max(value_counts)
# modes <- as.numeric(names(value_counts[value_counts == max_count]))
# print(modes)
max_count
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
# value_counts <- table(yeme)
# max_count <- max(value_counts)
# modes <- as.numeric(names(value_counts[value_counts == max_count]))
# print(modes)
# max_count
summary_yeme <- summary(yeme)
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
# value_counts <- table(yeme)
# max_count <- max(value_counts)
# modes <- as.numeric(names(value_counts[value_counts == max_count]))
# print(modes)
# max_count
summary_yeme <- summary(yeme)
summary_yeme
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
# value_counts <- table(yeme)
# max_count <- max(value_counts)
# modes <- as.numeric(names(value_counts[value_counts == max_count]))
# print(modes)
# max_count
summary_yeme <- summary(yeme)
summary_yeme
print(summary_yeme)
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
# value_counts <- table(yeme)
# max_count <- max(value_counts)
# modes <- as.numeric(names(value_counts[value_counts == max_count]))
# print(modes)
# max_count
# summary_yeme <- summary(yeme)
# summary_yeme
# print(summary_yeme)
df <- yeme.frame(value = yeme)
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
# value_counts <- table(yeme)
# max_count <- max(value_counts)
# modes <- as.numeric(names(value_counts[value_counts == max_count]))
# print(modes)
# max_count
# summary_yeme <- summary(yeme)
# summary_yeme
# print(summary_yeme)
df <- yeme.frame(values = yeme)
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
# value_counts <- table(yeme)
# max_count <- max(value_counts)
# modes <- as.numeric(names(value_counts[value_counts == max_count]))
# print(modes)
# max_count
# summary_yeme <- summary(yeme)
# summary_yeme
# print(summary_yeme)
df <- yeme.frame(values = data)
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
# value_counts <- table(yeme)
# max_count <- max(value_counts)
# modes <- as.numeric(names(value_counts[value_counts == max_count]))
# print(modes)
# max_count
# summary_yeme <- summary(yeme)
# summary_yeme
# print(summary_yeme)
df <- yeme.frame(values = data)
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
# value_counts <- table(yeme)
# max_count <- max(value_counts)
# modes <- as.numeric(names(value_counts[value_counts == max_count]))
# print(modes)
# max_count
# summary_yeme <- summary(yeme)
# summary_yeme
# print(summary_yeme)
df <- yeme.frame(values = data)
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
# value_counts <- table(yeme)
# max_count <- max(value_counts)
# modes <- as.numeric(names(value_counts[value_counts == max_count]))
# print(modes)
# max_count
# summary_yeme <- summary(yeme)
# summary_yeme
# print(summary_yeme)
df <- yeme.frame(values = data)
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
# value_counts <- table(yeme)
# max_count <- max(value_counts)
# modes <- as.numeric(names(value_counts[value_counts == max_count]))
# print(modes)
# max_count
# summary_yeme <- summary(yeme)
# summary_yeme
# print(summary_yeme)
df <- yeme.frame(values = data)
yeme <- c(1, 2, 3, 3, 4, 4, 4,7)
# value_counts <- table(yeme)
# max_count <- max(value_counts)
# modes <- as.numeric(names(value_counts[value_counts == max_count]))
# print(modes)
# max_count
# summary_yeme <- summary(yeme)
# summary_yeme
# print(summary_yeme)
df <- yeme.frame(values = data)
data <- c(1, 2, 3, 3, 4, 4, 4,7)
# value_counts <- table(yeme)
# max_count <- max(value_counts)
# modes <- as.numeric(names(value_counts[value_counts == max_count]))
# print(modes)
# max_count
# summary_yeme <- summary(yeme)
# summary_yeme
# print(summary_yeme)
df <- data.frame(values = data)
histogram <- ggplot(df, aes(x = values)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(x = "Values", y = "Frequency", title = "Histogram of Dataset")
data <- c(1, 2, 3, 3, 4, 4, 4,7)
# value_counts <- table(yeme)
# max_count <- max(value_counts)
# modes <- as.numeric(names(value_counts[value_counts == max_count]))
# print(modes)
# max_count
# summary_yeme <- summary(yeme)
# summary_yeme
# print(summary_yeme)
df <- data.frame(values = data)
histogram <- ggplot(df, aes(x = values)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(x = "Values", y = "Frequency", title = "Histogram of Dataset")
data <- c(1, 2, 3, 3, 4, 4, 4,7)
# value_counts <- table(yeme)
# max_count <- max(value_counts)
# modes <- as.numeric(names(value_counts[value_counts == max_count]))
# print(modes)
# max_count
# summary_yeme <- summary(yeme)
# summary_yeme
# print(summary_yeme)
df <- data.frame(values = data)
histogram <- ggplot(df, aes(x = values)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(x = "Values", y = "Frequency", title = "Histogram of Dataset")
library(ggplot2)
library(ggplot)
library(ggplot2)
# Load the ggplot2 package
library(ggplot2)
covid <- read.csv("Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
covid <- read.csv("C:\Users\Open User\Desktop\Muideen_SAIL\covid19_nigeria_states.csv")
covid <- read.csv("Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
covid <- read.csv("C:\Users\Open User\Desktop\Muideen_SAIL\covid19_nigeria_states.csv")
covid <- read.csv("C:\\Users\\Open User\\Desktop\\Muideen_SAIL\\covid19_nigeria_states.csv")
head(covid)
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
head(covid)
covid <- read.csv("Muideen_SAIL/covid19_nigeria_states.csv")
covid <- read.csv("Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
head(covid)
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
name(covid)
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
head(covid)
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
glimpse(covid)
library(dplyr)
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
glimpse(covid)
library(dplyr)
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
glimpse(covid)
head(covid)
library(dplyr)
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
# glimpse(covid)
# head(covid)
covid_summary <- summary(mean = mean(total_recoveries), median = median(total_recoveries))
library(dplyr)
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
# glimpse(covid)
# head(covid)
covid_summary <- summarize(mean = mean(total_recoveries), median = median(total_recoveries))
library(dplyr)
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
# glimpse(covid)
# head(covid)
covid_summary <- summarize(covid, mean = mean(total_recoveries), median = median(total_recoveries))
library(dplyr)
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
# glimpse(covid)
# head(covid)
covid_summary <- summarize(covid, mean = mean(total_recoveries), median = median(total_recoveries))
covid_summary
library(dplyr)
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
# glimpse(covid)
# head(covid)
covid_summary <- summarize(covid, mean = mean(total_recoveries, na.rm = TRUE), median = median(total_recoveries, na.rm = TRUE))
covid_summary
library(tidyverse)
library(tidyverse)
install.packages("colorspace")
library(tidyverse)
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
head(covid)
library(tidyverse)
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
# head(covid)
glimpse(covid)
library(tidyverse)
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
# head(covid)
# glimpse(covid)
covid %>%
summarise(mean = mean(total_confirmed), median = median(total_confirmed))
library(tidyverse)
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
# head(covid)
# glimpse(covid)
# calculate the mean median of total_confirmed cases
#covid %>%
#summarise(mean = mean(total_confirmed), median = median(total_confirmed))
ggplot(covid, aes(x = states, y= total_confirmed)) +
geom_bar(stat = "identity") +
theme(axis.test.x = element_text(angle = 90, hjust = 1))
ggplot(covid, aes(x = states, y = total_confirmed)) +
geom_boxplot(outlier.color = "red", outlier.shape = "8", outlier.size = 4)
# aesthetic mapping is the aes of x and y axis of the mapping
# geom_bar is they type of geometric obe=ject to be add to the plot here as bar chat
# theme modifies apperance of x-axis to rotate by 90 degrees and horizontal justification set to 1
ggplot(covid, aes(x = states, y= total_confirmed)) +
geom_bar(stat = "identity") +
theme(axis.test.x = element_text(angle = 90, hjust = 1))
ggplot(covid, aes(x = states, y = total_confirmed)) +
geom_boxplot(outlier.color = "red", outlier.shape = "8", outlier.size = 4)
covid_2 <- covid %>%
filter(!(states == "Lagos" | states == "FCT", states == "Kaduna"))
covid_2 <- covid %>%
filter(!(states == "Lagos" | states == "FCT" | states == "Kaduna"))
# aesthetic mapping is the aes of x and y axis of the mapping
# geom_bar is they type of geometric obe=ject to be add to the plot here as bar chat
# theme modifies apperance of x-axis to rotate by 90 degrees and horizontal justification set to 1
ggplot(covid, aes(x = states, y= total_confirmed)) +
geom_bar(stat = "identity") +
theme(axis.test.x = element_text(angle = 90, hjust = 1))
ggplot(covid, aes(x = states, y = total_confirmed)) +
geom_boxplot(outlier.color = "red", outlier.shape = "8", outlier.size = 4)
covid_2 <- covid %>%
filter(!(states == "Lagos" | states == "FCT" | states == "Kaduna"))
covid_2 <- covid %>%
filter(!(states == "Lagos" | states == "FCT" | states == "Kaduna"))
covid_2
ggplot(covid, aes(x = states, y = total_confirmed)) +
geom_boxplot(outlier.color = "red", outlier.shape = "8", outlier.size = 4)
covid_2 <- covid %>%
filter(!(states == "Lagos" | states == "FCT" | states == "Kaduna"))
ggplot(covid_2, aes(x = states, y = total_confirmed)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# aesthetic mapping is the aes of x and y axis of the mapping
# geom_bar is they type of geometric obe=ject to be add to the plot here as bar chat
# theme modifies apperance of x-axis to rotate by 90 degrees and horizontal justification set to 1
ggplot(covid, aes(x = states, y= total_confirmed)) +
geom_bar(stat = "identity") +
theme(axis.test.x = element_text(angle = 90, hjust = 1))
ggplot(covid, aes(x = states, y = total_confirmed)) +
geom_boxplot(outlier.color = "red", outlier.shape = "8", outlier.size = 4)
covid_2 <- covid %>%
filter(!(states == "Lagos" | states == "FCT" | states == "Kaduna"))
ggplot(covid_2, aes(x = states, y = total_confirmed)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(covid_2, aes(x = states, y = total_confirmed)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 8, outlier.size = 4)
source("~/intoduction to R.R")
library(tidyverse)
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
# aesthetic mapping is the aes of x and y axis of the mapping
# geom_bar is they type of geometric obe=ject to be add to the plot here as bar chat
# theme modifies apperance of x-axis to rotate by 90 degrees and horizontal justification set to 1
ggplot(covid, aes(x = states, y= total_confirmed)) +
geom_bar(stat = "identity") +
theme(axis.test.x = element_text(angle = 90, hjust = 1))
library(tidyverse)
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
head(covid)
glimpse(covid)
#calculate the mean median of total_confirmed cases
covid %>%
summarise(mean = mean(total_confirmed), median = median(total_confirmed))
# aesthetic mapping is the aes of x and y axis of the mapping
# geom_bar is they type of geometric obe=ject to be add to the plot here as bar chat
# theme modifies apperance of x-axis to rotate by 90 degrees and horizontal justification set to 1
ggplot(covid, aes(x = states, y= total_confirmed)) +
geom_bar(stat = "identity") +
theme(axis.test.x = element_text(angle = 90, hjust = 1))
ggplot(covid, aes(x = states, y = total_confirmed)) +
geom_boxplot(outlier.color = "red", outlier.shape = "8", outlier.size = 4)
covid_2 <- covid %>%
filter(!(states == "Lagos" | states == "FCT" | states == "Kaduna"))
ggplot(covid_2, aes(x = states, y = total_confirmed)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(covid_2, aes(x = states, y = total_confirmed)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 8, outlier.size = 4)
source("~/intoduction to R.R")
covid <- read.csv("C:/Users/Open User/Desktop/Muideen_SAIL/covid19_nigeria_states.csv")
head(covid)
glimpse(covid)
#calculate the mean median of total_confirmed cases
covid %>%
summarise(mean = mean(total_confirmed), median = median(total_confirmed))
# aesthetic mapping is the aes of x and y axis of the mapping
# geom_bar is they type of geometric obe=ject to be add to the plot here as bar chat
# theme modifies apperance of x-axis to rotate by 90 degrees and horizontal justification set to 1
ggplot(covid, aes(x = states, y= total_confirmed)) +
geom_bar(stat = "identity") +
theme(axis.test.x = element_text(angle = 90, hjust = 1))
ggplot(covid, aes(x = states, y = total_confirmed)) +
geom_boxplot(outlier.color = "red", outlier.shape = "8", outlier.size = 4)
covid_2 <- covid %>%
filter(!(states == "Lagos" | states == "FCT" | states == "Kaduna"))
ggplot(covid_2, aes(x = states, y = total_confirmed)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(covid_2, aes(x = states, y = total_confirmed)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 8, outlier.size = 4)
set.seed(234)
set.seed(234)
x = rnorm(n = 100, mean = 10, sd = 1)
plot(x, type = "h", xlab = "Trials", ylab = "Values")
hist(x, main = "Normal Distribution", col = "lightblue")
set.seed(234)
n <- 10 #set sample size
mu <- 0 #mean
sd <- 5 #standatd deviation
qnorm(runif(n), mean = mu, sd = sd) #Generate 10 random normally distribution
set.seed(234)
# Generating 100 samples from a normal distribution with mean of 10 and sd 1
x <- rnorm(100, mean = 10, sd = 1)
# Plot the samples
hist(x, main = "Normal Distribution", col = "lightblue")
# Generating and plotting samples from a standard normal distribution
y <- rnorm(100000)
set.seed(234)
# Generating 100 samples from a normal distribution with mean of 10 and sd 1
x <- rnorm(100, mean = 10, sd = 1)
# Plot the samples
hist(x, main = "Normal Distribution", col = "lightblue")
# Generating and plotting samples from a standard normal distribution
y <- rnorm(100000)
hist(y, main="Standard Normal Distribution", col="lightgreen")
library(tidyverse)
# Load the mtcars dataset
data("mtcars")
#Visualize data distribution
my_data <- mtcars
ggplot(data=my_data, aes(x = mpg, y = qsec)) + geom_point()
# Making Predictions
# Make predictions, using linear regression
#  Fit the Model
my_data <- mtcars
my_model <- lm(qsec ~ mpg, data = my_data)
# Make Predictions
predictions <- predict(my_model, newdata = my_data)
ggplot(data=my_data, aes(x = mpg , y = qsec)) +
geom_point() +
geom_line(aes(x = mpg, y = predictions))
# We can visualize the uncertainty of data by predicted residual errors
# Step 1 : Residual Error
my_data <- mtcars
my_model <- lm(qsec ~ mpg, data = my_data)
# Make Predictions
predictions <- predict(my_model, newdata = my_data)
my_data$err <- (predictions - my_data$qsec)
# Step 2 : Plot Prediction with residuals
ggplot(data = my_data) +
geom_point(aes(x=mpg, y = qsec)) +
geom_line(aes(x = mpg, y = predictions)) +
geom_line(aes(x=mpg, y=err), colour = "red")+
# We can visualize the uncertainty of data by predicted residual errors
# Step 1 : Residual Error
my_data <- mtcars
my_model <- lm(qsec ~ mpg, data = my_data)
# Make Predictions
predictions <- predict(my_model, newdata = my_data)
my_data$err <- (predictions - my_data$qsec)
# Step 2 : Plot Prediction with residuals
ggplot(data = my_data) +
geom_point(aes(x=mpg, y = qsec)) +
geom_line(aes(x = mpg, y = predictions)) +
geom_line(aes(x=mpg, y=err), colour = "red")+
# We can visualize the uncertainty of data by predicted residual errors
# Step 1 : Residual Error
my_data <- mtcars
my_model <- lm(qsec ~ mpg, data = my_data)
# Make Predictions
predictions <- predict(my_model, newdata = my_data)
my_data$err <- (predictions - my_data$qsec)
# Step 2 : Plot Prediction with residuals
ggplot(data = my_data) +
geom_point(aes(x=mpg, y = qsec)) +
geom_line(aes(x = mpg, y = predictions)) +
geom_line(aes(x=mpg, y=err), colour = "red")+
geom_hline(yintercept = 0)
# To understand the uncertainty, we look at the range of residual errors
min(my_data$err); max(my_data$err)
### Generate two normal distributions
x1 = rnorm(n = 10, mean = 0, sd = 1)
x2 = rnorm(n = 10, mean = 0.5, sd = 1)
### Generate two normal distributions
x1 = rnorm(n = 10, mean = 0, sd = 1)
x2 = rnorm(n = 10, mean = 0.5, sd = 1)
### Perform t-test
t.test(x1, x2)## Interpret results
# We can visualize the uncertainty of data by predicted residual errors
# Step 1 : Residual Error
my_data <- mtcars
my_model <- lm(qsec ~ mpg, data = my_data)
# Make Predictions
predictions <- predict(my_model, newdata = my_data)
my_data$err <- (predictions - my_data$qsec)
# Step 2 : Plot Prediction with residuals
ggplot(data = my_data) +
geom_point(aes(x=mpg, y = qsec)) +
geom_line(aes(x = mpg, y = predictions)) +
geom_line(aes(x=mpg, y=err), colour = "red")+
geom_hline(yintercept = 0)
# To understand the uncertainty, we look at the range of residual errors
min(my_data$err); max(my_data$err)
x <- 0:10
n <- 10
p <- 0.5
pmf <- dbinom(x, size = n, prob = p)
print(pmf)
getwd()
setwd("SAIL_Innonvation_LAB_R-Progamming/R_data_structure/")
getwd()
setwd("../")
getwd()
setwd("SAIL_Innonvation_LAB_R-Progamming/R_data_structure/")
setwd("R_data_structure/")
arr1 <- array(c(1:18), dim = c(2, 3, 3))
arr1
fac <- factor("a", "b", "c", "b", "c")
fac
fac <- factor(c("a", "b", "c", "b", "c"))
fac
arr1 <- array(c(1:18), dim = c(3, 3, 2))
arr1
arr1 <- array(c(1:18), dim = c(3, 2, 3))
arr1
arr1 <- array(c(1:18), dim = c(2, 3, 3))
arr1
arr <- array(c(1:48), dim(4,4,3))
arr
arr <- array(c(1:48), dim = c(4,4,3))
arr
arr <- array(c(1:48), dim = c(4,3,4))
arr
rownames <- c("row1", "row2", "row3", "row4")
colnames <- c("col1", "col2", "col3", "row4")
matrix_name <- c("Olu", "Gift", "Ajala")
arr <- array(c(1:40), dim = c(4, 4, 3), dimnames = list(rownames, colnames))
arr
arr <- array(c(1:40), dim = c(4, 4, 3), dimnames = list(rownames, colnames))
arr
fac <-factor(arr)
fac <-factor(arr)
fac
