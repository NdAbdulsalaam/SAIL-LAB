x2 = rnorm(n = 10, mean = 0.5, sd = 1)
### Perform t-test
t.test(x1, x2)
Welch Two Sample t-test
### Generate two normal distributions
x1 = rnorm(n = 10, mean = 0, sd = 1)
x2 = rnorm(n = 10, mean = 0.5, sd = 1)
### Perform t-test
t.test(x1, x2)
?dbinom()
dbinom(x=0:8, size=8, prob=1/6)
X.prob <- dbinom(x=0:8,size=8,prob=1/6)
barplot(X.prob,names.arg=0:8,space=0,xlab="x",ylab="Pr(X = x)")
X.prob <- dbinom(x=0:13,size=13,prob=3/4)
barplot(X.prob,names.arg=0:13,space=0,xlab="x",ylab="Pr(X = x)")
X.prob
X <- dbinom(x=0:13,size=13,prob=3/4)
X
barplot(X,names.arg=0:13,space=0,xlab="x",ylab="Pr(X = x)")
X <- dbinom(x=10:13,size=13,prob=3/4)
X
barplot(X,names.arg=0:13,space=0,xlab="x",ylab="Pr(X = x)")
X <- dbinom(x=10:13,size=13,prob=3/4)
X
barplot(X,names.arg=0:13,space=0,xlab="x",ylab="Pr(X = x)")
barplot(X,names.arg=10:13,space=0,xlab="x",ylab="Pr(X = x)")
sum(X)
X <- dbinom(x=0:9,size=13,prob=3/4)
1 - sum(X)
sum(X)
X <- dbinom(x=8:11,size=13,prob=3/4)
sum(X)
for(i in c){
if(i %in% c(5,7,9)) {
next
}
print(i)
}
for(i in num){
if(i %in% c(5,7,9)) {
next
}
print(i)
}
num <- c(1:10)
for(i in num){
if(i %in% c(5,7,9)) {
next
}
print(i)
}
for(i in num){
if(i %in% c(5,7,9)) {
paste(i, "is our student")
next
}
paste(i, 'is not our student')
}
print(paste(i, 'is not our student'))
for(i in num){
if(i %in% c(5,7,9)) {
print(paste(i, "is our student"))
next
}
print(paste(i, 'is not our student'))
}
num <- sample(1:100, 100, replace = TRUE)  # Sample data
num
num <- sample(1:100, replace = TRUE)  # Sample data
num
num <- sample(1:100, 100,replace = TRUE)  # Sample data
num
library(microbenchmark)
?sample
num <- sample(1:100, 10,replace = TRUE)  # Sample data
num
# Using %in%
code_in <- function() {
for(i in num) {
if(i %in% c(5, 7, 9)) {
print(paste(i, "is our student"))
next
}
print(paste(i, 'is not our student'))
}
}
# Using ||
code_or <- function() {
for(i in num) {
if(i == 5 || i == 7 || i == 9) {
print(paste(i, "is our student"))
next
}
print(paste(i, 'is not our student'))
}
}
# Benchmarking
microbenchmark(code_in(), code_or(), times = 100)
for (i in 1:10) {
print(i)
}
sum_even = function(num) {
for(i in num){
my_sum <- []
sum_even = function(num) {
for(i in num){
my_sum <- c()
if(num%%2==0){
append(my_sum, new_num)
}
}
print(sum(my_sum))
}
sum_even(20)
sum_even = function(num) {
for(i in num){
my_sum <- c()
if(num%%2==0){
append(my_sum,num)
}
}
print(sum(my_sum))
}
sum_even = function(num) {
for(i in num){
my_sum <- c()
if(num%%2==0){
append(my_sum,num)
}
}
print(sum(my_sum))
}
n
sum_even(20)
sum_even = function(num) {
for(i in num){
my_sum <- c()
if(num%%2==0){
append(my_sum,num)
}
}
print(sum(my_sum))
}
sum_even(20)
sum_even = function(num) {
for(i in num){
my_sum <- c()
if(num%%2==0){
my_sum <- append(my_sum,num)
}
}
print(sum(my_sum))
}
sum_even(20)
my_sum <- append(my_sum,num)
sum_even = function(num) {
my_sum <- c()
for(i in num){
if(num%%2==0){
my_sum <- append(my_sum,num)
}
}
print(sum(my_sum))
}
sum_even(20)
sum_even = function(num) {
my_sum <- c()
for(i in num){
if(num%%2==0){
my_sum <- append(my_sum,num)
print(my_sum)
}
}
print(sum(my_sum))
}
sum_even(20)
sum_even(1:20)
sum_even = function(num) {
my_sum <- c()
for(i in num){
if(num%%2==0){
my_sum <- append(my_sum,num)
}
}
print(sum(my_sum))
}
sum_even(1:20)
sum_even = function(num) {
my_sum <- c()
for(i in num){
if(num%%2==0){
my_sum <- append(my_sum,num)
}
}
print(sum(my_sum))
}
sum_even(c(1:20))
print(c(1:20))
my_num <- c(1:20)
sum_even(my_num)
sum_even = function(num) {
my_sum <- c()
for(i in num){
if(i%%2==0){
my_sum <- append(my_sum,num)
}
}
print(sum(my_sum))
}
my_num <- c(1:20)
sum_even(my_num)
my_num
sum_even = function(num) {
my_sum <- c()
for(i in num){
if(i%%2==0){
my_sum <- append(my_sum,num)
print(my_sum)
}
}
print(sum(my_sum))
}
my_num <- c(1:5)
my_num
sum_even(my_num)
my_sum <- append(my_sum,i)
sum_even = function(num) {
my_sum <- c()
for(i in num){
if(i%%2==0){
my_sum <- append(my_sum,i)
print(my_sum)
}
}
print(sum(my_sum))
}
my_num <- c(1:5)
my_num
sum_even(my_num)
my_num <-
sum_even(c(1:5))
sum_even = function(num) {
my_sum <- c()
for(i in num){
if(i%%2==0){
my_sum <- append(my_sum,i)
}
}
print(sum(my_sum))
}
my_num <-
sum_even(c(1:5))
my_recur <- function(num) {
if(num == 0 || num == 1) {
return(1)
} else {
return(num * my_recur(num - 1))
}
}
my_recur(5)
my_recur <- function(num) {
if(num == 0) {
return(1)
} else {
return(num * my_recur(num - 1))
}
}
my_recur(5)
my_recur2 <- function(num) {
if(num == 0 || num ==1) {
return(1)
} else {
return(num * my_recur2(num - 1))
}
}
my_recur(20)
my_recur2(10)
my_recur2(20)
my_recur(10)
my_recur2(10)
sum_even2 = function(num) {
sum <- c()
for(i in num){
if(i%%2==0){
sum <- sum + i
}
}
return sum
sum_even2 = function(num) {
sum <- c()
for(i in num){
if(i%%2==0){
sum <- sum + i
}
}
return(sum)
}
sum_even(c(1:5))
sum_even(c(1:5))
sum_even2(c(1:5))
sum_even2 = function(num) {
sum <- 0
for(i in num){
if(i%%2==0){
sum <- sum + i
}
}
return(sum)
}
sum_even(c(1:5))
sum_even2(c(1:5))
my_recur <- function(num) {
if(num == 0) {
return(1)
} else {
return(num * my_recur(num - 1))
}
}
my_recur(10)
my_recur(5)
my_recur <- function(num) {
while(num > 1) {
return(num * my_recur(num - 1))
}
}
my_recur(5)
my_recur <- function(num) {
while(num > 1) {
return(num * my_recur(num - 1))
}else {
my_sum = function(num) {
my_even <- 0
my_odd <- 0
for(i in num){
if(i%%2==0){
my_even <- sum + i
}
if(i%%2==0){
my_odd <- sum + i
}
}
paste("Sum of even numbers", my_even)
paste("Sum of odd numbers", my_odd)
}
my_sum(c(1:5))
my_sum = function(num) {
my_even <- 0
my_odd <- 0
for(i in num){
if(i%%2==0){
my_even <- my_even + i
}
if(i%%2==0){
my_odd <- my_odd + i
}
}
paste("Sum of even numbers", my_even)
paste("Sum of odd numbers", my_odd)
}
my_sum(c(1:5))
my_sum(c(1:5))
my_sum = function(num) {
my_even <- 0
my_odd <- 0
for(i in num){
if(i%%2==0){
my_even <- my_even + i
}
if(i%%2==0){
my_odd <- my_odd + i
}
}
print( paste("Sum of even numbers", my_even))
print(paste("Sum of odd numbers", my_odd))
}
my_sum(c(1:5))
my_sum(c(1:15))
my_sum = function(num) {
my_even <- 0
my_odd <- 0
for(i in num){
if(i%%2==0){
my_even <- my_even + i
} else {
my_odd <- my_odd + i
}
}
print( paste("Sum of even numbers", my_even))
print(paste("Sum of odd numbers", my_odd))
}
my_sum(c(1:15))
# Read CSV data (assuming file path is correct)
uba <- read_csv("../data/uba_branches.csv")
pacman::p_load(
usethis,
tidyverse
)
# Read CSV data (assuming file path is correct)
uba <- read_csv("../data/uba_branches.csv")
setwd("C:/Users/Open User/Desktop/Nurudeen-DS")
setwd("C:/Users/Open User/Desktop/Nurudeen-DS/Practice")
# Read CSV data (assuming file path is correct)
uba <- read_csv("../data/uba_branches.csv")
head("uba")
head(uba)
pacman::p_load(
usethis,
tidyverse,
tidygeocoder
)
# Read CSV data (assuming file path is correct)
uba_df <- read_csv("../data/uba_branches.csv")
geo_tbl <- uba_df
geo_tbl <- uba_df %>%
tidygeocoder::geocode(
address = Address,
method = "osm"
)
geo_tbl <- uba_df %>%
tidygeocoder::geocode(
address = Address,
method = "google",
api_key = google_api_key
)
# Retrieve the Google API key from the environment
google_api_key <- Sys.getenv("GOOGLE_GEOCODE_API_KEY")
geo_tbl <- uba_df %>%
tidygeocoder::geocode(
address = Address,
method = "google",
api_key = google_api_key
)
# Retrieve the Google API key from the environment
google_api_key <- Sys.getenv("GOOGLE_GEOCODE_API_KEY")
geo_tbl <- uba_df %>%
tidygeocoder::geocode(
address = Address,
method = "google",
api_key = google_api_key
)
geo_tbl <- uba_df %>%
tidygeocoder::geocode(
address = Address,
method = "google"
)
geo_tbl_google <- uba_df %>%
tidygeocoder::geocode(
address = Address,
method = "google"
)
view(geo_tbl_google)
view(geo_tbl)
geo_tbl_osm <- uba_df %>%
tidygeocoder::geocode(
address = Address,
method = "osm"
)
pacman::p_load(
usethis,
tidyverse,
tidygeocoder,
janitor
)
# Read CSV data (assuming file path is correct)
uba_df <- read_csv("../data/uba_branches.csv")
uba_df <- uba_df %>%
clean_names()
uba_df2 <- uba_df %>%
clean_names()
head(uba_df2)
geo_tbl_osm <- uba_df2 %>%
tidygeocoder::geocode(
address = Address,
method = "osm"
)
geo_tbl_osm <- uba_df2 %>%
tidygeocoder::geocode(
address = address,
method = "osm"
)
head(uba_df2)
geo_tbl_google <- uba_df2 %>%
tidygeocoder::geocode(
address = address,
method = "google"
)
view(geo_tbl_google)
geo_tbl_osm <- uba_df2 %>%
tidygeocoder::geocode(
address = address,
method = "osm"
)
geo_tbl_osm <- uba_df2[1:20, ] %>%
tidygeocoder::geocode(
address = address,
method = "osm",
verbose = TRUE,        # Enable verbose output for debugging
full_results = TRUE    # Retrieve full results for debugging
)
geo_tbl_osm <- uba_df2[1:20, ] %>%
tidygeocoder::geocode(
address = address,
method = "osm",
verbose = TRUE,        # Enable verbose output for debugging
full_results = TRUE    # Retrieve full results for debugging
)
geo_tbl_osm <- uba_df2[1:20, ] %>%
tidygeocoder::geocode(
address = address,
method = "osm",
)
view(geo_tbl_osm)
